{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\skale\\\\Documents\\\\Projects\\\\HarvardCS50M2020MobileApp-React\\\\ContactsMobileApp\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Constants from 'expo-constants';\nimport contacts, { compareNames } from \"./contacts\";\nimport ContactsList from \"./ContactsList\";\nimport AddContactForm from \"./AddContactForm\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      showContacts: false,\n      showForm: false,\n      contacts: contacts\n    };\n\n    _this.addContact = function (newContact) {\n      _this.setState(function (prevState) {\n        return {\n          contacts: [].concat(_toConsumableArray(prevState.contacts), [newContact]),\n          showForm: false\n        };\n      });\n    };\n\n    _this.toggleContacts = function () {\n      _this.setState(function (prevState) {\n        return {\n          showContacts: !prevState.showContacts\n        };\n      });\n    };\n\n    _this.toggleForm = function () {\n      _this.setState(function (prevState) {\n        return {\n          showForm: !prevState.showForm\n        };\n      });\n    };\n\n    _this.sort = function () {\n      _this.setState(function (prevState) {\n        return {\n          contacts: _toConsumableArray(prevState.contacts).sort(compareNames)\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      if (this.state.showForm) return React.createElement(AddContactForm, {\n        onSubmit: this.addContact,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 36\n        }\n      });\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 7\n        }\n      }, React.createElement(Button, {\n        title: \"Toggle Contacts\",\n        onPress: this.toggleContacts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        title: \"Add Contact\",\n        onPress: this.toggleForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        title: \"sort\",\n        onPress: this.sort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }), this.state.showContacts && React.createElement(ContactsList, {\n        contacts: this.state.contacts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 37\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: Constants.statusBarHeight\n  }\n});","map":{"version":3,"sources":["C:/Users/skale/Documents/Projects/HarvardCS50M2020MobileApp-React/ContactsMobileApp/App.js"],"names":["React","Constants","contacts","compareNames","ContactsList","AddContactForm","App","state","showContacts","showForm","addContact","newContact","setState","prevState","toggleContacts","toggleForm","sort","styles","container","Component","StyleSheet","create","flex","backgroundColor","paddingTop","statusBarHeight"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,OAAOC,QAAP,IAAkBC,YAAlB;AACA,OAAOC,YAAP;AACA,OAAOC,cAAP;;IAEqBC,G;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,YAAY,EAAE,KADR;AAENC,MAAAA,QAAQ,EAAE,KAFJ;AAGNP,MAAAA,QAAQ,EAAEA;AAHJ,K;;UAMRQ,U,GAAa,UAAAC,UAAU,EAAI;AACzB,YAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAC1BX,UAAAA,QAAQ,+BAAMW,SAAS,CAACX,QAAhB,IAA0BS,UAA1B,EADkB;AAE1BF,UAAAA,QAAQ,EAAE;AAFgB,SAAL;AAAA,OAAvB;AAID,K;;UAEDK,c,GAAiB,YAAM;AACrB,YAAKF,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAACL,UAAAA,YAAY,EAAE,CAACK,SAAS,CAACL;AAA1B,SAAL;AAAA,OAAvB;AACD,K;;UAEDO,U,GAAa,YAAM;AACjB,YAAKH,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAACJ,UAAAA,QAAQ,EAAE,CAACI,SAAS,CAACJ;AAAtB,SAAL;AAAA,OAAvB;AACD,K;;UAEDO,I,GAAO,YAAM;AACX,YAAKJ,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAC1BX,UAAAA,QAAQ,EAAE,mBAAIW,SAAS,CAACX,QAAd,EAAwBc,IAAxB,CAA6Bb,YAA7B;AADgB,SAAL;AAAA,OAAvB;AAGD,K;;;;;;;6BAEQ;AACP,UAAG,KAAKI,KAAL,CAAWE,QAAd,EAAwB,OAAO,oBAAC,cAAD;AAAgB,QAAA,QAAQ,EAAE,KAAKC,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAExB,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEO,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,iBAAd;AAAgC,QAAA,OAAO,EAAE,KAAKJ,cAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,aAAd;AAA4B,QAAA,OAAO,EAAE,KAAKC,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,OAAO,EAAE,KAAKC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIG,KAAKT,KAAL,CAAWC,YAAX,IAA2B,oBAAC,YAAD;AAAc,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWL,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJ9B,CADF;AAQD;;;;EAvC8BF,KAAK,CAACmB,S;;SAAlBb,G;AA0CrB,IAAMW,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAEvB,SAAS,CAACwB;AAHb;AADoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { Button, SectionList, StyleSheet, Text, View } from 'react-native';\nimport Constants from 'expo-constants'\n\nimport contacts, {compareNames} from './contacts';\nimport ContactsList from './ContactsList';\nimport AddContactForm from './AddContactForm';\n\nexport default class App extends React.Component {\n  state = {\n    showContacts: false,\n    showForm: false,\n    contacts: contacts\n  }\n\n  addContact = newContact => {\n    this.setState(prevState => ({\n      contacts: [...prevState.contacts, newContact],\n      showForm: false\n    }))\n  }\n\n  toggleContacts = () => {\n    this.setState(prevState => ({showContacts: !prevState.showContacts}))\n  }\n\n  toggleForm = () => {\n    this.setState(prevState => ({showForm: !prevState.showForm}))\n  }\n\n  sort = () => {\n    this.setState(prevState => ({\n      contacts: [...prevState.contacts].sort(compareNames)\n    }))\n  }\n\n  render() {\n    if(this.state.showForm) return <AddContactForm onSubmit={this.addContact} />\n\n    return (\n      <View style={styles.container}>\n        <Button title=\"Toggle Contacts\" onPress={this.toggleContacts} />\n        <Button title=\"Add Contact\" onPress={this.toggleForm} />\n        <Button title=\"sort\" onPress={this.sort} />\n        {this.state.showContacts && <ContactsList contacts={this.state.contacts} />}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: Constants.statusBarHeight,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}