{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar NUM_CONTACTS = 1;\nvar firstNames = ['Emma', 'Noah', 'Olivia', 'Liam', 'Ava', 'William', 'Sophia', 'Mason', 'Isabella', 'James', 'Mia', 'Benjamin', 'Charlotte', 'Jacob', 'Abigail', 'Michael', 'Emily', 'Elijah', 'Harper', 'Ethan', 'Amelia', 'Alexander', 'Evelyn', 'Oliver', 'Elizabeth', 'Daniel', 'Sofia', 'Lucas', 'Madison', 'Matthew', 'Avery', 'Aiden', 'Ella', 'Jackson', 'Scarlett', 'Logan', 'Grace', 'David', 'Chloe', 'Joseph', 'Victoria', 'Samuel', 'Riley', 'Henry', 'Aria', 'Owen', 'Lily', 'Sebastian', 'Aubrey', 'Gabriel', 'Zoey', 'Carter', 'Penelope', 'Jayden', 'Lillian', 'John', 'Addison', 'Luke', 'Layla', 'Anthony', 'Natalie', 'Isaac', 'Camila', 'Dylan', 'Hannah', 'Wyatt', 'Brooklyn', 'Andrew', 'Zoe', 'Joshua', 'Nora', 'Christopher', 'Leah', 'Grayson', 'Savannah', 'Jack', 'Audrey', 'Julian', 'Claire', 'Ryan', 'Eleanor', 'Jaxon', 'Skylar', 'Levi', 'Ellie', 'Nathan', 'Samantha', 'Caleb', 'Stella', 'Hunter', 'Paisley', 'Christian', 'Violet', 'Isaiah', 'Mila', 'Thomas', 'Allison', 'Aaron', 'Alexa', 'Lincoln'];\nvar lastNames = ['Smith', 'Jones', 'Brown', 'Johnson', 'Williams', 'Miller', 'Taylor', 'Wilson', 'Davis', 'White', 'Clark', 'Hall', 'Thomas', 'Thompson', 'Moore', 'Hill', 'Walker', 'Anderson', 'Wright', 'Martin', 'Wood', 'Allen', 'Robinson', 'Lewis', 'Scott', 'Young', 'Jackson', 'Adams', 'Tryniski', 'Green', 'Evans', 'King', 'Baker', 'John', 'Harris', 'Roberts', 'Campbell', 'James', 'Stewart', 'Lee', 'County', 'Turner', 'Parker', 'Cook', 'Mc', 'Edwards', 'Morris', 'Mitchell', 'Bell', 'Ward', 'Watson', 'Morgan', 'Davies', 'Cooper', 'Phillips', 'Rogers', 'Gray', 'Hughes', 'Harrison', 'Carter', 'Murphy'];\n\nvar rand = function rand(max) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nvar generateName = function generateName() {\n  return firstNames[rand(firstNames.length - 1)] + \" \" + lastNames[rand(lastNames.length - 1)];\n};\n\nvar generatePhoneNumber = function generatePhoneNumber() {\n  return rand(999, 100) + \"-\" + rand(999, 100) + \"-\" + rand(9999, 1000);\n};\n\nvar createContact = function createContact() {\n  return {\n    name: generateName(),\n    phone: generatePhoneNumber()\n  };\n};\n\nexport var compareNames = function compareNames(contact1, contact2) {\n  return contact1.name > contact2.name;\n};\n\nvar addKeys = function addKeys(val, key) {\n  return _objectSpread({\n    key: key\n  }, val);\n};\n\nexport default Array.from({\n  length: NUM_CONTACTS\n}, createContact).map(addKeys);","map":{"version":3,"sources":["C:/Users/skale/Documents/Projects/HarvardCS50M2020MobileApp-React/ContactsMobileApp/contacts.js"],"names":["NUM_CONTACTS","firstNames","lastNames","rand","max","min","Math","floor","random","generateName","length","generatePhoneNumber","createContact","name","phone","compareNames","contact1","contact2","addKeys","val","key","Array","from","map"],"mappings":"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","sourcesContent":["const NUM_CONTACTS = 1\n\nconst firstNames = ['Emma','Noah','Olivia','Liam','Ava','William','Sophia','Mason','Isabella','James','Mia','Benjamin','Charlotte','Jacob','Abigail','Michael','Emily','Elijah','Harper','Ethan','Amelia','Alexander','Evelyn','Oliver','Elizabeth','Daniel','Sofia','Lucas','Madison','Matthew','Avery','Aiden','Ella','Jackson','Scarlett','Logan','Grace','David','Chloe','Joseph','Victoria','Samuel','Riley','Henry','Aria','Owen','Lily','Sebastian','Aubrey','Gabriel','Zoey','Carter','Penelope','Jayden','Lillian','John','Addison','Luke','Layla','Anthony','Natalie','Isaac','Camila','Dylan','Hannah','Wyatt','Brooklyn','Andrew','Zoe','Joshua','Nora','Christopher','Leah','Grayson','Savannah','Jack','Audrey','Julian','Claire','Ryan','Eleanor','Jaxon','Skylar','Levi','Ellie','Nathan','Samantha','Caleb','Stella','Hunter','Paisley','Christian','Violet','Isaiah','Mila','Thomas','Allison','Aaron','Alexa','Lincoln']\n\nconst lastNames = ['Smith','Jones','Brown','Johnson','Williams','Miller','Taylor','Wilson','Davis','White','Clark','Hall','Thomas','Thompson','Moore','Hill','Walker','Anderson','Wright','Martin','Wood','Allen','Robinson','Lewis','Scott','Young','Jackson','Adams','Tryniski','Green','Evans','King','Baker','John','Harris','Roberts','Campbell','James','Stewart','Lee','County','Turner','Parker','Cook','Mc','Edwards','Morris','Mitchell','Bell','Ward','Watson','Morgan','Davies','Cooper','Phillips','Rogers','Gray','Hughes','Harrison','Carter','Murphy']\n\n// generate a random number between min and max\nconst rand = (max, min = 0) => Math.floor(Math.random() * (max - min + 1)) + min\n\n// generate a name\nconst generateName = () => `${firstNames[rand(firstNames.length - 1)]} ${lastNames[rand(lastNames.length - 1)]}`\n\n// generate a phone number\nconst generatePhoneNumber = () => `${rand(999, 100)}-${rand(999, 100)}-${rand(9999, 1000)}`\n\n// create a person\nconst createContact = () => ({name: generateName(), phone: generatePhoneNumber()})\n\n// compare two contacts for alphabetizing\nexport const compareNames = (contact1, contact2) => contact1.name > contact2.name\n\n// add keys to based on index\nconst addKeys = (val, key) => ({key, ...val})\n\n// create an array of length NUM_CONTACTS and alphabetize by name\nexport default Array.from({length: NUM_CONTACTS}, createContact).map(addKeys)\n"]},"metadata":{},"sourceType":"module"}