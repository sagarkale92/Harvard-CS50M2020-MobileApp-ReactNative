{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\skale\\\\Documents\\\\Projects\\\\HarvardCS50M2020MobileApp-React\\\\ContactsMobileApp\\\\AddContactForm.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport PropTypes from 'prop-types';\nimport Constants from 'expo-constants';\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: Constants.statusBarHeight,\n    justifyContent: 'center'\n  },\n  input: {\n    minWidth: 100,\n    marginVertical: 20,\n    marginHorizontal: 20,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 3,\n    padding: 5,\n    borderColor: 'black',\n    borderWidth: 1\n  }\n});\n\nvar AddContactForm = function (_React$Component) {\n  _inherits(AddContactForm, _React$Component);\n\n  var _super = _createSuper(AddContactForm);\n\n  function AddContactForm() {\n    var _this;\n\n    _classCallCheck(this, AddContactForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      name: '',\n      phone: '',\n      isFormValid: false\n    };\n\n    _this.handleNameChange = function (name) {\n      _this.setState({\n        name: name\n      });\n    };\n\n    _this.handlePhoneChange = function (phone) {\n      if (+phone >= 0 && phone.length <= 10) {\n        _this.setState({\n          phone: phone\n        });\n      }\n    };\n\n    _this.validateForm = function () {\n      if (+_this.state.phone >= 0 && _this.state.phone.length <= 10 && _this.state.name.length >= 3) {\n        _this.setState({\n          isFormValid: true\n        });\n      } else {\n        _this.setState({\n          isFormValid: false\n        });\n\n        ;\n      }\n    };\n\n    _this.handleSubmit = function () {\n      if (+_this.state.phone >= 0 && _this.state.phone.length <= 10 && _this.state.name.length >= 3) {\n        _this.props.onSubmit(_this.state);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AddContactForm, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.name !== prevState.name || this.state.phone !== prevState.phone) {\n        this.validateForm();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        style: styles.input,\n        onChangeText: this.handleNameChange,\n        value: this.state.name,\n        placeholder: \"Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }), React.createElement(TextInput, {\n        style: styles.input,\n        onChangeText: this.handlePhoneChange,\n        value: this.state.phone,\n        keyboardType: \"numeric\",\n        placeholder: \"Phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        title: \"Submit\",\n        onPress: this.handleSubmit,\n        disabled: !this.state.isFormValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return AddContactForm;\n}(React.Component);\n\nAddContactForm.propTypes = {\n  addContact: PropTypes.func\n};\nexport { AddContactForm as default };","map":{"version":3,"sources":["C:/Users/skale/Documents/Projects/HarvardCS50M2020MobileApp-React/ContactsMobileApp/AddContactForm.js"],"names":["React","PropTypes","Constants","styles","StyleSheet","create","container","flex","backgroundColor","paddingTop","statusBarHeight","justifyContent","input","minWidth","marginVertical","marginHorizontal","paddingHorizontal","paddingVertical","borderRadius","padding","borderColor","borderWidth","AddContactForm","state","name","phone","isFormValid","handleNameChange","setState","handlePhoneChange","length","validateForm","handleSubmit","props","onSubmit","prevProps","prevState","Component","propTypes","addContact","func"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {TextInput, StyleSheet, View, Button} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport Constants from 'expo-constants';\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    paddingTop: Constants.statusBarHeight,\r\n    justifyContent: 'center'\r\n  },\r\n  input: {\r\n    minWidth: 100,\r\n    marginVertical: 20,\r\n    marginHorizontal: 20,\r\n    paddingHorizontal: 20,\r\n    paddingVertical: 10,\r\n    borderRadius: 3,\r\n    padding: 5,\r\n    borderColor: 'black',\r\n    borderWidth: 1\r\n  }\r\n});\r\n\r\nexport default class AddContactForm extends React.Component {\r\n  static propTypes = {\r\n    addContact: PropTypes.func\r\n  }\r\n\r\n  state = {\r\n    name: '',\r\n    phone: '',\r\n    isFormValid: false\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if(this.state.name !== prevState.name || this.state.phone !== prevState.phone) {\r\n      this.validateForm();\r\n    }\r\n  }\r\n\r\n  handleNameChange = (name) => {\r\n    this.setState({name})\r\n  }\r\n\r\n  handlePhoneChange = (phone) => {\r\n    if(+phone >= 0 && phone.length <= 10) {\r\n      this.setState({phone})\r\n    }\r\n  }\r\n\r\n  validateForm = () => {\r\n    if(+this.state.phone >= 0 && this.state.phone.length <= 10 && this.state.name.length >= 3) {\r\n      this.setState({isFormValid: true});\r\n    } else {\r\n      this.setState({isFormValid: false});;\r\n    }\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    if(+this.state.phone >= 0 && this.state.phone.length <= 10 && this.state.name.length >= 3) {\r\n      this.props.onSubmit(this.state);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <TextInput style={styles.input}\r\n          onChangeText={this.handleNameChange}\r\n          value={this.state.name}\r\n          placeholder=\"Name\"\r\n        />\r\n        <TextInput style={styles.input}\r\n          onChangeText={this.handlePhoneChange}\r\n          value={this.state.phone}\r\n          keyboardType=\"numeric\"\r\n          placeholder=\"Phone\"\r\n        />\r\n        <Button title=\"Submit\" onPress={this.handleSubmit} disabled={!this.state.isFormValid}/>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}